/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import com.privatejgoodies.common.base.Objects;
import conexion.ConexionBD;
import conexion.DeduccionDAO;
import conexion.EmpleadoDAO;
import conexion.EstadoDAO;
import conexion.FormaPagoDAO;
import conexion.NominaDAO;
import conexion.NominaDeduccionDAO;
import conexion.NominaPercepcionDAO;
import conexion.PercepcionDAO;
import conexion.PeriodoDAO;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import modelo.RH_Empleado;
import modelo.RH_Deduccion;
import modelo.RH_FormaPago;
import modelo.RH_Nomina;
import modelo.RH_NominaDeduccion;
import modelo.RH_NominaPercepcion;
import modelo.RH_Percepcion;
import modelo.RH_Periodo;
import org.apache.commons.io.FileUtils;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellType;
import org.apache.poi.ss.usermodel.CreationHelper;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

/**
 *
 * @author Marco Chavez
 */
public class AddNominaFrame extends javax.swing.JFrame {

    /**
     * Creates new form AddEmpleadoFrame
     */
    ConexionBD conexion;
    RH_Empleado empleado;
    RH_Nomina nomina;
    Integer diasTrabajados;

    ArrayList<RH_FormaPago> formasPago;
    ArrayList<RH_Periodo> periodos;
    ArrayList<RH_Empleado> empleados = new ArrayList<>();
    ArrayList<RH_Percepcion> percepcionesTabla = new ArrayList<>();
    ArrayList<RH_Deduccion> deduccionesTabla = new ArrayList<>();
    ArrayList<RH_NominaPercepcion> nominaPercepciones = new ArrayList<>();
    ArrayList<RH_NominaDeduccion> nominaDeducciones = new ArrayList<>();

    ArrayList<RH_Percepcion> percepcionesSeleccionadas = new ArrayList<>();
    ArrayList<RH_Deduccion> deduccionesSeleccionadas = new ArrayList<>();

    EstadoDAO daoEstado;
    Boolean isNew;
    String path;

    public AddNominaFrame(ConexionBD conexion) {
        initComponents();
        this.setLocationRelativeTo(null);
        this.conexion = conexion;
        this.isNew = true;
        nomina = new RH_Nomina();
        btn_Excel.setVisible(false);
        this.nomina.setEstatus("PENDIENTE");
        txf_Estatus.setText(this.nomina.getEstatus());
        txf_Estatus.setEnabled(false);
        btn_Autoriza.setVisible(false);
        btn_Cancela.setVisible(false);
        btn_Excel.setVisible(false);
    }

    public AddNominaFrame(ConexionBD conexion, RH_Nomina nomina) {
        initComponents();
        this.setLocationRelativeTo(null);
        this.conexion = conexion;
        this.isNew = false;
        this.nomina = nomina;
        dp_FechaPago.setDate(this.nomina.getFechaPago().toLocalDate());
        this.empleado = this.nomina.getEmpleado();
        btn_Excel.setVisible(false);
        NominaDeduccionDAO daoNominaDeduccion = new NominaDeduccionDAO(this.conexion);
        NominaPercepcionDAO daoNominaPercepcion = new NominaPercepcionDAO(this.conexion);
        nominaDeducciones = daoNominaDeduccion.consultaDeducciones(this.nomina.getIdNomina());
        nominaPercepciones = daoNominaPercepcion.consultaPercepciones(this.nomina.getIdNomina());
        txf_Estatus.setText(this.nomina.getEstatus());
        txf_Estatus.setEnabled(false);
        cmb_FormaPago.setEnabled(true);
        dp_FechaPago.setEnabled(false);
        if ("PAGADA".equals(this.nomina.getEstatus()) || "CANCELADA".equals(this.nomina.getEstatus())) {
            btn_Autoriza.setEnabled(false);
            btn_Cancela.setEnabled(false);
            btn_Realizar.setEnabled(false);
            tbl_Percepciones.setEnabled(false);
            tbl_Deducciones.setEnabled(false);
            if ("PAGADA".equals(this.nomina.getEstatus())) {
                btn_Excel.setEnabled(true);
                btn_Excel.setVisible(true);
                cmb_FormaPago.setEnabled(false);

            }
        }
        seleccionaCasillas();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        btn_RealizarOperacion = new javax.swing.JButton();
        btn_Atras = new javax.swing.JButton();
        lbl_Titulo = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tbl_Deducciones = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        tbl_Percepciones = new javax.swing.JTable();
        cmb_Empleado = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        cmb_Periodo = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        cmb_FormaPago = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        btn_Realizar = new javax.swing.JButton();
        btn_Autoriza = new javax.swing.JButton();
        btn_Cancela = new javax.swing.JButton();
        jScrollPane7 = new javax.swing.JScrollPane();
        tbl_Salario = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        dp_FechaPago = new com.github.lgooddatepicker.components.DatePicker();
        jLabel8 = new javax.swing.JLabel();
        txf_Estatus = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        btn_Excel = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbl_Nomina = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Generar Nomina");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(241, 151, 89));
        jPanel1.setPreferredSize(new java.awt.Dimension(500, 547));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btn_RealizarOperacion.setText("Realizar Operacion");
        btn_RealizarOperacion.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                btn_RealizarOperacionMouseMoved(evt);
            }
        });
        btn_RealizarOperacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_RealizarOperacionActionPerformed(evt);
            }
        });
        jPanel1.add(btn_RealizarOperacion, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 1207, -1, -1));

        btn_Atras.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Assets/btnAtras.png"))); // NOI18N
        btn_Atras.setBorderPainted(false);
        btn_Atras.setContentAreaFilled(false);
        btn_Atras.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_AtrasActionPerformed(evt);
            }
        });
        jPanel1.add(btn_Atras, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, 240, 90));

        lbl_Titulo.setText("Generar Nomina");
        lbl_Titulo.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jPanel1.add(lbl_Titulo, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 40, -1, -1));

        tbl_Deducciones.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "IdDeduccion", "Nombre", "Porcentaje", "Importe", "Seleccionado"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.Float.class, java.lang.Float.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tbl_Deducciones.setBackground(new java.awt.Color(153, 255, 153));
        tbl_Deducciones.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbl_DeduccionesMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(tbl_Deducciones);

        jPanel1.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 690, 490, 120));

        tbl_Percepciones.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "idPercepcion", "Nombre Percepcion", "Dias a pagar", "Importe", "Seleccionado"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Float.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tbl_Percepciones.setBackground(new java.awt.Color(153, 255, 153));
        tbl_Percepciones.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbl_PercepcionesMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(tbl_Percepciones);

        jPanel1.add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 500, 500, 120));

        cmb_Empleado.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "SELECCIONAR EMPLEADO" }));
        cmb_Empleado.setBackground(new java.awt.Color(153, 255, 153));
        cmb_Empleado.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmb_EmpleadoItemStateChanged(evt);
            }
        });
        jPanel1.add(cmb_Empleado, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 280, 360, -1));

        jLabel4.setText("Empleado");
        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 280, -1, 20));

        jLabel5.setText("Periodo");
        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 140, -1, 20));

        cmb_Periodo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "SELECCIONAR PERIODO" }));
        cmb_Periodo.setBackground(new java.awt.Color(153, 255, 153));
        cmb_Periodo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmb_PeriodoItemStateChanged(evt);
            }
        });
        jPanel1.add(cmb_Periodo, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 140, -1, -1));

        jLabel6.setText("Forma Pago");
        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 210, -1, 20));

        cmb_FormaPago.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "SELECCIONE FORMA DE PAGO" }));
        cmb_FormaPago.setBackground(new java.awt.Color(153, 255, 153));
        cmb_FormaPago.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmb_FormaPagoItemStateChanged(evt);
            }
        });
        jPanel1.add(cmb_FormaPago, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 210, -1, -1));

        jLabel1.setText("Deducciones Nomina");
        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 660, -1, 20));

        jLabel2.setText("Resumen Nomina");
        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 370, -1, 20));

        jLabel3.setText("Salario del Periodo");
        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 370, -1, 20));

        btn_Realizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Assets/Ope.png"))); // NOI18N
        btn_Realizar.setBorderPainted(false);
        btn_Realizar.setContentAreaFilled(false);
        btn_Realizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_RealizarActionPerformed(evt);
            }
        });
        jPanel1.add(btn_Realizar, new org.netbeans.lib.awtextra.AbsoluteConstraints(940, 690, 180, 90));

        btn_Autoriza.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Assets/Nominas/APAG.png"))); // NOI18N
        btn_Autoriza.setBorderPainted(false);
        btn_Autoriza.setContentAreaFilled(false);
        btn_Autoriza.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_AutorizaActionPerformed(evt);
            }
        });
        jPanel1.add(btn_Autoriza, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 520, -1, -1));

        btn_Cancela.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Assets/Nominas/CNOM.png"))); // NOI18N
        btn_Cancela.setBorderPainted(false);
        btn_Cancela.setContentAreaFilled(false);
        btn_Cancela.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_CancelaActionPerformed(evt);
            }
        });
        jPanel1.add(btn_Cancela, new org.netbeans.lib.awtextra.AbsoluteConstraints(900, 520, -1, -1));

        tbl_Salario.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null}
            },
            new String [] {
                "Dias a pagar", "Importe"
            }
        ));
        tbl_Salario.setBackground(new java.awt.Color(153, 255, 153));
        tbl_Salario.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbl_SalarioMouseClicked(evt);
            }
        });
        jScrollPane7.setViewportView(tbl_Salario);

        jPanel1.add(jScrollPane7, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 400, 190, 50));

        jLabel7.setText("Percepciones Nomina");
        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 470, -1, 20));

        dp_FechaPago.setBackground(new java.awt.Color(153, 255, 153));
        jPanel1.add(dp_FechaPago, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 250, 310, -1));

        jLabel8.setText("Fecha Pago");
        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jPanel1.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 220, 80, 20));

        txf_Estatus.setBackground(new java.awt.Color(153, 255, 153));
        txf_Estatus.setEnabled(false);
        jPanel1.add(txf_Estatus, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 140, 130, -1));

        jLabel9.setText("Estatus");
        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jPanel1.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 110, -1, 20));

        btn_Excel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Assets/Nominas/GEX.png"))); // NOI18N
        btn_Excel.setBorderPainted(false);
        btn_Excel.setContentAreaFilled(false);
        btn_Excel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_ExcelActionPerformed(evt);
            }
        });
        jPanel1.add(btn_Excel, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 680, -1, -1));

        tbl_Nomina.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null}
            },
            new String [] {
                "SubTotal", "Retenciones", "Total", "Dias Trabajados", "Estatus"
            }
        ));
        tbl_Nomina.setBackground(new java.awt.Color(153, 255, 153));
        jScrollPane1.setViewportView(tbl_Nomina);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 400, 560, 50));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(-20, 0, 1170, 830));

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void seleccionaCasillas() {

    }
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        EmpleadoDAO daoEmpleado = new EmpleadoDAO(this.conexion);
        DeduccionDAO daoDeduccion = new DeduccionDAO(this.conexion);
        PercepcionDAO daoPercepcion = new PercepcionDAO(this.conexion);
        FormaPagoDAO daoFormaPago = new FormaPagoDAO(this.conexion);
        PeriodoDAO daoPeriodo = new PeriodoDAO(this.conexion);

        empleados = daoEmpleado.consultaEmpleadosVista();
        deduccionesTabla = daoDeduccion.consultaDeducionesVista();
        percepcionesTabla = daoPercepcion.consultaPercepcionesVista();
        formasPago = daoFormaPago.consultaFormasPagoVista();
        periodos = daoPeriodo.consultaPeriodosVista();

        if (!isNew) {
            cmb_Empleado.removeAllItems();
            cmb_Empleado.addItem(this.nomina.getEmpleado().getNombreCompleto());
            cmb_Empleado.setSelectedIndex(0);
            cmb_Empleado.setEnabled(false);
            cmb_Periodo.addItem(this.nomina.getPeriodo().getNombre());
            cmb_Periodo.setSelectedIndex(1);
            cmb_Periodo.setEnabled(false);
            for (int i = 0; i < formasPago.size(); i++) {
                cmb_FormaPago.addItem(formasPago.get(i).getNombre());
                if (this.nomina.getFormaPago().getNombre().equals(formasPago.get(i).getNombre())) {
                    cmb_FormaPago.setSelectedIndex(i + 1);
                }
            }
        } else {
            empleados.forEach((e) -> {
                cmb_Empleado.addItem(e.getNombreCompleto());
            });

            periodos.forEach((t) -> {
                cmb_Periodo.addItem(t.getNombre());
            });
            formasPago.forEach((t) -> {
                cmb_FormaPago.addItem(t.getNombre());
            });
        }


    }//GEN-LAST:event_formWindowOpened

    private void btn_RealizarOperacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_RealizarOperacionActionPerformed
//        for (int i = 0; i < tbl_Empleados.getRowCount(); i++) {
//            if ((Boolean) tbl_Empleados.getValueAt(i, 3)) {
//                RH_Empleado e = new RH_Empleado(Integer.parseInt(tbl_Empleados.getValueAt(i, 0).toString()), this.conexion);
//                empleados.add(e);
//
//            }
//        }
//        System.out.println("Lista Seleccionados");
//        empleados.forEach((t) -> {
//            System.out.println(t.getNombreCompleto());;
//        });


    }//GEN-LAST:event_btn_RealizarOperacionActionPerformed

    private void btn_RealizarOperacionMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_RealizarOperacionMouseMoved

    }//GEN-LAST:event_btn_RealizarOperacionMouseMoved

    private void btn_AtrasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_AtrasActionPerformed
        NominasFrame nominasFrame = new NominasFrame(this.conexion);
        this.dispose();
        nominasFrame.setVisible(true);
        this.pack();
    }//GEN-LAST:event_btn_AtrasActionPerformed

    private void cmb_EmpleadoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmb_EmpleadoItemStateChanged
        NominaDAO daoNomina = new NominaDAO(this.conexion);
        if (cmb_Empleado.getSelectedIndex() > 0 && isNew) {
            empleado = empleados.get(cmb_Empleado.getSelectedIndex() - 1);
            nomina.setEmpleado(empleado);
            nomina.setDiasTrabajados(daoNomina.calculaDiasTrabajados(this.nomina.getEmpleado().getIdEmpleado(), this.nomina.getPeriodo().getIdPeriodo()));
            nomina.calculaNomina(percepcionesSeleccionadas, deduccionesSeleccionadas);
            tbl_Percepciones.setEnabled(true);
            tbl_Deducciones.setEnabled(true);

            llenarTablaPercepciones(percepcionesTabla);
            llenarTablaDeducciones(deduccionesTabla);
            llenaTablaNomina();
            llenaTablaSueldo();
        } else {
            if (!isNew) {
                llenarTablaPercepciones(percepcionesTabla);
                llenarTablaDeducciones(deduccionesTabla);
                llenaTablaNomina();
                llenaTablaSueldo();
            } else {

            }

        }
    }//GEN-LAST:event_cmb_EmpleadoItemStateChanged

    private void cmb_PeriodoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmb_PeriodoItemStateChanged
        if (cmb_Periodo.getSelectedIndex() > 0 && isNew) {
            nomina.setPeriodo(periodos.get(cmb_Periodo.getSelectedIndex() - 1));
        } else {
            cmb_Empleado.setSelectedIndex(0);
        }

    }//GEN-LAST:event_cmb_PeriodoItemStateChanged

    private void cmb_FormaPagoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmb_FormaPagoItemStateChanged
        if (cmb_FormaPago.getSelectedIndex() > 0) {
            this.nomina.setFormaPago(formasPago.get(cmb_FormaPago.getSelectedIndex() - 1));
        }
    }//GEN-LAST:event_cmb_FormaPagoItemStateChanged

    private void tbl_PercepcionesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbl_PercepcionesMouseClicked
        llenaListas();
        llenarTablaDeducciones(deduccionesTabla);
    }//GEN-LAST:event_tbl_PercepcionesMouseClicked

    private void tbl_DeduccionesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbl_DeduccionesMouseClicked
        llenaListas();
    }//GEN-LAST:event_tbl_DeduccionesMouseClicked

    private void tbl_SalarioMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbl_SalarioMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_tbl_SalarioMouseClicked

    private void btn_RealizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_RealizarActionPerformed
        NominaDAO daoNomina = new NominaDAO(this.conexion);
        NominaDeduccionDAO daoNominaDeducciones = new NominaDeduccionDAO(this.conexion);
        NominaPercepcionDAO daoNominaPercepciones = new NominaPercepcionDAO(this.conexion);
        this.nomina.setFechaPago(java.sql.Date.valueOf(dp_FechaPago.getDate()));
        if (isNew) {
            this.nomina.setFechaElaboracion(java.sql.Date.valueOf(LocalDate.now()));
            if (daoNomina.insertarNomina(nomina)) {
                this.nomina.setIdNomina(daoNomina.consultaIdGenerado());
                RH_NominaPercepcion salario = new RH_NominaPercepcion();
                salario.setNomina(nomina);
                salario.setPercepcion(new RH_Percepcion(1, this.conexion));
                salario.setImporte(this.nomina.getDiasTrabajados() * this.nomina.getEmpleado().getSalarioDiario());
                salario.setEstatus("A");
                daoNominaPercepciones.insertarNominaPercepcion(salario);
                percepcionesSeleccionadas.forEach((t) -> {
                    RH_NominaPercepcion nominaPercepcion = new RH_NominaPercepcion();
                    nominaPercepcion.setNomina(nomina);
                    nominaPercepcion.setPercepcion(t);
                    nominaPercepcion.setImporte(this.nomina.getEmpleado().getSalarioDiario() * t.getDiasPagar());
                    nominaPercepcion.setEstatus("A");
                    daoNominaPercepciones.insertarNominaPercepcion(nominaPercepcion);
                });

                deduccionesSeleccionadas.forEach((t) -> {
                    RH_NominaDeduccion nominaDeduccion = new RH_NominaDeduccion();
                    nominaDeduccion.setNomina(nomina);
                    nominaDeduccion.setDeduccion(t);
                    nominaDeduccion.setImporte(this.nomina.getSubtotal() * (t.getPorcentaje() / 100));
                    nominaDeduccion.setEstatus("A");
                    daoNominaDeducciones.insertarNominaDeduccion(nominaDeduccion);
                });
                JOptionPane.showMessageDialog(null, "Nomina Añadida con exito");
            } else {
                JOptionPane.showMessageDialog(null, "Ocurrió un error al intentar añadir la nomina");
            }
        } else {
            if (daoNomina.actualizarNomina(nomina)) {
                daoNomina.eliminaExternas(nomina);
                llenaListas();
                RH_NominaPercepcion salario = new RH_NominaPercepcion();
                salario.setNomina(nomina);
                salario.setPercepcion(new RH_Percepcion(1, this.conexion));
                salario.setImporte(this.nomina.getDiasTrabajados() * this.nomina.getEmpleado().getSalarioDiario());
                salario.setEstatus("A");
                daoNominaPercepciones.insertarNominaPercepcion(salario);
                percepcionesSeleccionadas.forEach((t) -> {
                    RH_NominaPercepcion nominaPercepcion = new RH_NominaPercepcion();
                    nominaPercepcion.setNomina(nomina);
                    nominaPercepcion.setPercepcion(t);
                    nominaPercepcion.setImporte(this.nomina.getEmpleado().getSalarioDiario() * t.getDiasPagar());
                    nominaPercepcion.setEstatus("A");
                    daoNominaPercepciones.insertarNominaPercepcion(nominaPercepcion);
                });

                deduccionesSeleccionadas.forEach((t) -> {
                    RH_NominaDeduccion nominaDeduccion = new RH_NominaDeduccion();
                    nominaDeduccion.setNomina(nomina);
                    nominaDeduccion.setDeduccion(t);
                    nominaDeduccion.setImporte(this.nomina.getSubtotal() * (t.getPorcentaje() / 100));
                    nominaDeduccion.setEstatus("A");
                    daoNominaDeducciones.insertarNominaDeduccion(nominaDeduccion);
                });
                JOptionPane.showMessageDialog(null, "Nomina Actualizada con exito");
            } else {
                JOptionPane.showMessageDialog(null, "Ocurrió un error al intentar añadir la nomina");
            }
        }
        NominasFrame nominaFrame = new NominasFrame(this.conexion);
        this.dispose();
        nominaFrame.setVisible(true);
        this.pack();
    }//GEN-LAST:event_btn_RealizarActionPerformed

    private void btn_AutorizaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_AutorizaActionPerformed
        int reply = JOptionPane.showConfirmDialog(null, "Está seguro que desea Autorizar el pago de la  Nomina ?", "Confirmar Cambio de estatus", JOptionPane.YES_NO_OPTION);
        if (reply == JOptionPane.YES_OPTION) {
            this.nomina.setEstatus("PAGADA");
            txf_Estatus.setText(this.nomina.getEstatus());
            btn_Cancela.setEnabled(false);
            btn_Autoriza.setEnabled(false);
            tbl_Percepciones.setEnabled(false);
            tbl_Deducciones.setEnabled(false);
        }
    }//GEN-LAST:event_btn_AutorizaActionPerformed

    private void btn_CancelaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_CancelaActionPerformed
        int reply = JOptionPane.showConfirmDialog(null, "Está seguro que desea Cancelar la  Nomina ?", "Confirmar Cambio de estatus", JOptionPane.YES_NO_OPTION);
        if (reply == JOptionPane.YES_OPTION) {
            this.nomina.setEstatus("CANCELADA");
            txf_Estatus.setText(this.nomina.getEstatus());
            txf_Estatus.setText(this.nomina.getEstatus());
            btn_Cancela.setEnabled(false);
            btn_Autoriza.setEnabled(false);
            tbl_Percepciones.setEnabled(false);
            tbl_Deducciones.setEnabled(false);
        }
    }//GEN-LAST:event_btn_CancelaActionPerformed

    private void btn_ExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_ExcelActionPerformed
        Integer idNomina = this.nomina.getIdNomina();
        ArrayList<RH_NominaPercepcion> percepciones = new ArrayList<>();
        ArrayList<RH_NominaDeduccion> deducciones = new ArrayList<>();
        NominaDeduccionDAO daoDeduccion = new NominaDeduccionDAO(this.conexion);
        NominaPercepcionDAO daoPercepcion = new NominaPercepcionDAO(this.conexion);
        percepciones = daoPercepcion.consultaPercepciones(idNomina);
        deducciones = daoDeduccion.consultaDeducciones(idNomina);

        try {
            path = (new File(".").getCanonicalPath());
            File template = new File(path + "\\resources\\templates\\nominaTemplate.xlsx");
            File copTemplate = new File(path + "\\resources\\temp\\nomina" + String.valueOf(idNomina) + ".xlsx");
            FileUtils.copyFile(template, copTemplate);
            FileInputStream file = new FileInputStream(copTemplate);
            Workbook workbook = new XSSFWorkbook(file);
            Sheet sheet = workbook.getSheetAt(0);

            //Nombre del Empleado
            Row r = sheet.getRow(5); // 10-1
            if (r == null) {
                r = sheet.createRow(5);
            }
            Cell c = r.getCell(11); // 4-1
            if (c == null) {
                c = r.createCell(11, CellType.STRING);
            }
            c.setCellValue(this.nomina.getEmpleado().getNombreCompleto());

            //Direccion del Empleado
            r = sheet.getRow(7);
            if (r == null) {
                r = sheet.createRow(7);
            }
            c = r.getCell(2);
            if (c == null) {
                c = r.createCell(2, CellType.STRING);
            }
            c.setCellValue(this.nomina.getEmpleado().getDireccionCompleta());

            //NSS del Empleado
            r = sheet.getRow(7);
            if (r == null) {
                r = sheet.createRow(7);
            }
            c = r.getCell(16);
            if (c == null) {
                c = r.createCell(16, CellType.STRING);
            }
            c.setCellValue(this.nomina.getEmpleado().getNss());

            //Departamento del Empleado
            r = sheet.getRow(9);
            if (r == null) {
                r = sheet.createRow(9);
            }
            c = r.getCell(11);
            if (c == null) {
                c = r.createCell(11, CellType.STRING);
            }
            c.setCellValue(this.nomina.getEmpleado().getDepartamento().getNombre());

            //Puesto del Empleado
            r = sheet.getRow(9);
            if (r == null) {
                r = sheet.createRow(9);
            }
            c = r.getCell(18);
            if (c == null) {
                c = r.createCell(18, CellType.STRING);
            }
            c.setCellValue(this.nomina.getEmpleado().getPuesto().getNombre());

            //Codigo Nomina
            r = sheet.getRow(9);
            if (r == null) {
                r = sheet.createRow(9);
            }
            c = r.getCell(2);
            if (c == null) {
                c = r.createCell(2, CellType.NUMERIC);
            }
            c.setCellValue(this.nomina.getIdNomina());

            //Sucursal Empleado
            r = sheet.getRow(9);
            if (r == null) {
                r = sheet.createRow(9);
            }
            c = r.getCell(6);
            if (c == null) {
                c = r.createCell(6, CellType.STRING);
            }
            c.setCellValue(this.nomina.getEmpleado().getSucursal().getNombre());

            //Forma Pago
            r = sheet.getRow(9);
            if (r == null) {
                r = sheet.createRow(9);
            }
            c = r.getCell(8);
            if (c == null) {
                c = r.createCell(8, CellType.STRING);
            }
            c.setCellValue(this.nomina.getFormaPago().getNombre());

            //Periodo Inicial
            r = sheet.getRow(13);
            if (r == null) {
                r = sheet.createRow(13);
            }
            c = r.getCell(8);
            if (c == null) {
                c = r.createCell(8, CellType.STRING);
            }
            c.setCellValue(this.nomina.getPeriodo().getFechaInicio().toString());
            System.out.println(this.nomina.getPeriodo().getFechaInicio().toString());

            //Periodo Fin
            r = sheet.getRow(13);
            if (r == null) {
                r = sheet.createRow(13);
            }
            c = r.getCell(10);
            if (c == null) {
                c = r.createCell(10, CellType.STRING);
            }
            c.setCellValue(this.nomina.getPeriodo().getFechaFin().toString());
            System.out.println(this.nomina.getPeriodo().getFechaFin().toString());

            //Fecha de liquidacion
            r = sheet.getRow(13);
            if (r == null) {
                r = sheet.createRow(13);
            }
            c = r.getCell(15);
            if (c == null) {
                c = r.createCell(15, CellType.STRING);
            }
            c.setCellValue(this.nomina.getFechaPago().toString());

            //Dias Trabajados
            r = sheet.getRow(13);
            if (r == null) {
                r = sheet.createRow(13);
            }
            c = r.getCell(20);
            if (c == null) {
                c = r.createCell(20, CellType.NUMERIC);
            }
            c.setCellValue(this.nomina.getDiasTrabajados());

            //SUBTOTAL
            r = sheet.getRow(36);
            if (r == null) {
                r = sheet.createRow(36);
            }
            c = r.getCell(18);
            if (c == null) {
                c = r.createCell(18, CellType.NUMERIC);
            }
            c.setCellValue((double) this.nomina.getSubtotal());

            //Retenciones
            r = sheet.getRow(50);
            if (r == null) {
                r = sheet.createRow(50);
            }
            c = r.getCell(18);
            if (c == null) {
                c = r.createCell(18, CellType.NUMERIC);
            }
            c.setCellValue((double) this.nomina.getRetenciones());

            //Total
            r = sheet.getRow(52);
            if (r == null) {
                r = sheet.createRow(52);
            }
            c = r.getCell(18);
            if (c == null) {
                c = r.createCell(18, CellType.NUMERIC);
            }
            c.setCellValue((double) this.nomina.getTotal());

            for (int i = 0; i < percepciones.size(); i++) {
                r = sheet.getRow(i + 23);
                if (r == null) {
                    r = sheet.createRow(i + 23);
                }
                c = r.getCell(3);
                if (c == null) {
                    c = r.createCell(3, CellType.STRING);
                }
                c.setCellValue(percepciones.get(i).getPercepcion().getNombre());

                r = sheet.getRow(i + 23);
                if (r == null) {
                    r = sheet.createRow(i + 23);
                }
                c = r.getCell(14);
                if (c == null) {
                    c = r.createCell(14, CellType.NUMERIC);
                }
                c.setCellValue((double) percepciones.get(i).getImporte());
            }

            for (int i = 0; i < deducciones.size(); i++) {
                r = sheet.getRow(i + 42);
                if (r == null) {
                    r = sheet.createRow(i + 42);
                }
                c = r.getCell(3);
                if (c == null) {
                    c = r.createCell(3, CellType.STRING);
                }
                c.setCellValue(deducciones.get(i).getDeduccion().getNombre());

                r = sheet.getRow(i + 42);
                if (r == null) {
                    r = sheet.createRow(i + 42);
                }
                c = r.getCell(10);
                if (c == null) {
                    c = r.createCell(10, CellType.NUMERIC);
                }
                c.setCellValue((double) deducciones.get(i).getDeduccion().getPorcentaje() / 100);

                r = sheet.getRow(i + 42);
                if (r == null) {
                    r = sheet.createRow(i + 42);
                }
                c = r.getCell(14);
                if (c == null) {
                    c = r.createCell(14, CellType.NUMERIC);
                }
                c.setCellValue((double) deducciones.get(i).getImporte());

            }
            //Nombre del Empleado
            r = sheet.getRow(72); // 10-1
            if (r == null) {
                r = sheet.createRow(72);
            }
            c = r.getCell(12); // 4-1
            if (c == null) {
                c = r.createCell(12, CellType.STRING);
            }
            c.setCellValue(this.nomina.getEmpleado().getNombreCompleto());

            OutputStream outputStream = new FileOutputStream(new File(path + "\\resources\\temp\\nomina" + String.valueOf(idNomina) + "V2.xlsx"));
            workbook.write(outputStream);
            try {
                path = (new File(".").getCanonicalPath());
                Process p = Runtime.getRuntime().exec("rundll32 SHELL32.DLL,ShellExec_RunDLL " + path + "\\resources\\temp\\nomina" + String.valueOf(idNomina) + "V2.xlsx");
            } catch (Exception evvv) {
                JOptionPane.showMessageDialog(null, "No se puede abrir el archivo de ayuda, probablemente fue borrado", "ERROR", JOptionPane.ERROR_MESSAGE);

            }

        } catch (IOException ex) {
            Logger.getLogger(AddAusenciaJustificadaFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btn_ExcelActionPerformed

    private void llenaListas() {

        percepcionesSeleccionadas = new ArrayList<>();
        deduccionesSeleccionadas = new ArrayList<>();

        for (int i = 0; i < tbl_Percepciones.getRowCount(); i++) {
            try {
                if ((Boolean) tbl_Percepciones.getValueAt(i, 4)) {
                    RH_Percepcion p = new RH_Percepcion(Integer.parseInt(tbl_Percepciones.getValueAt(i, 0).toString()), this.conexion);
                    percepcionesSeleccionadas.add(p);
                }
            } catch (NullPointerException e) {
                System.out.println("error " + e.getMessage());
            }
        }

        for (int i = 0; i < tbl_Deducciones.getRowCount(); i++) {
            try {
                if ((Boolean) tbl_Deducciones.getValueAt(i, 4)) {
                    RH_Deduccion d = new RH_Deduccion(Integer.parseInt(tbl_Deducciones.getValueAt(i, 0).toString()), this.conexion);
                    deduccionesSeleccionadas.add(d);
                }
            } catch (NullPointerException e) {
                System.out.println("error " + e.getMessage());
            }
        }

        this.nomina.calculaNomina(percepcionesSeleccionadas, deduccionesSeleccionadas);
        llenaTablaNomina();
    }

    private void llenaTablaNomina() {

        String[] encabezado = {"SubTotal", "Retenciones", "Total", "Dias Trabajados"};
        Object[][] datos = new Object[1][4];
        int ren = 0;
        datos[ren][0] = nomina.getSubtotal();
        datos[ren][1] = nomina.getRetenciones();
        datos[ren][2] = nomina.getTotal();
        datos[ren][3] = nomina.getDiasTrabajados();
        ren++;
        DefaultTableModel m = new DefaultTableModel(datos, encabezado) {
            @Override
            public boolean isCellEditable(int rowIndex, int colIndex) {
                return false;
            }
        };

        tbl_Nomina.setModel(m);

    }

    private void llenarTablaPercepciones(ArrayList<RH_Percepcion> lista) {

        String[] encabezado = {"IdPercepcion", "Nombre", "Dias a Pagar", "Importe", "Seleccionado"};
        Object[][] datos = new Object[lista.size()][5];
        int ren = 0;
        for (RH_Percepcion s : lista) {
            datos[ren][0] = s.getIdPercepcion();
            datos[ren][1] = s.getNombre();
            datos[ren][2] = s.getDiasPagar();
            datos[ren][3] = empleado.getSalarioDiario() * s.getDiasPagar();
            if (!isNew) {
                for (int in = 0; in < nominaPercepciones.size(); in++) {
                    if (nominaPercepciones.get(in).getPercepcion().getNombre().equals(s.getNombre())) {
                        datos[ren][4] = true;
                    }
                }
            } else {
                datos[ren][4] = false;
            }
            ren++;
        }
        DefaultTableModel m = new DefaultTableModel(datos, encabezado) {
            @Override
            public boolean isCellEditable(int rowIndex, int colIndex) {
                if (colIndex != 4) {
                    return false;
                } else {
                    return true;
                }
            }

            @Override
            public Class getColumnClass(int column) {
                switch (column) {
                    case 0:
                        return String.class;
                    case 1:
                        return String.class;
                    case 2:
                        return Integer.class;
                    case 3:
                        return Float.class;
                    case 4:
                        return Boolean.class;
                    default:
                        return Boolean.class;
                }
            }

        };
        tbl_Percepciones.setModel(m);
    }

    private void llenarTablaDeducciones(ArrayList<RH_Deduccion> lista) {

        String[] encabezado = {"IdDeduccion", "Nombre", "Porcentanje", "Importe", "Seleccionado"};
        Object[][] datos = new Object[lista.size()][5];
        int ren = 0;
        for (RH_Deduccion s : lista) {
            datos[ren][0] = s.getIdDeduccion();
            datos[ren][1] = s.getNombre();
            datos[ren][2] = s.getPorcentaje();
            datos[ren][3] = this.nomina.getSubtotal() * (s.getPorcentaje() / 100);
            if (!isNew) {
                for (int in = 0; in < nominaDeducciones.size(); in++) {
                    if (nominaDeducciones.get(in).getDeduccion().getNombre().equals(s.getNombre())) {
                        datos[ren][4] = true;
                    }
                }
            } else {
                datos[ren][4] = false;
            }
            ren++;
        }
        DefaultTableModel m;
        if (cmb_Empleado.getSelectedIndex() > 0) {
            m = new DefaultTableModel(datos, encabezado) {
                @Override
                public boolean isCellEditable(int rowIndex, int colIndex) {
                    if (colIndex != 4) {
                        return false;
                    } else {
                        return true;
                    }
                }

                @Override
                public Class getColumnClass(int column) {
                    switch (column) {
                        case 0:
                            return Integer.class;
                        case 1:
                            return String.class;
                        case 2:
                            return Float.class;
                        case 3:
                            return Float.class;
                        case 4:
                            return Boolean.class;
                        default:
                            return String.class;
                    }
                }

            };

        } else {
            m = new DefaultTableModel(datos, encabezado) {
                @Override
                public boolean isCellEditable(int rowIndex, int colIndex) {
                    if (colIndex != 4) {
                        return false;
                    } else {
                        return true;
                    }
                }

                @Override
                public Class getColumnClass(int column) {
                    switch (column) {
                        case 0:
                            return Integer.class;
                        case 1:
                            return String.class;
                        case 2:
                            return Float.class;
                        case 3:
                            return Float.class;
                        case 4:
                            return Boolean.class;
                        default:
                            return String.class;
                    }
                }

            };
        }

        tbl_Deducciones.setModel(m);
    }

    private void llenaTablaSueldo() {
        String[] encabezado = {"Dias a Pago", "Importe"};
        Object[][] datos = new Object[1][2];

        datos[0][0] = this.nomina.getDiasTrabajados();
        datos[0][1] = this.nomina.getDiasTrabajados() * this.nomina.getEmpleado().getSalarioDiario();

        DefaultTableModel m = new DefaultTableModel(datos, encabezado) {
            @Override
            public boolean isCellEditable(int rowIndex, int colIndex) {
                return false;
            }
        };
        tbl_Salario.setModel(m);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_Atras;
    private javax.swing.JButton btn_Autoriza;
    private javax.swing.JButton btn_Cancela;
    private javax.swing.JButton btn_Excel;
    private javax.swing.JButton btn_Realizar;
    private javax.swing.JButton btn_RealizarOperacion;
    private javax.swing.JComboBox<String> cmb_Empleado;
    private javax.swing.JComboBox<String> cmb_FormaPago;
    private javax.swing.JComboBox<String> cmb_Periodo;
    private com.github.lgooddatepicker.components.DatePicker dp_FechaPago;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JLabel lbl_Titulo;
    private javax.swing.JTable tbl_Deducciones;
    private javax.swing.JTable tbl_Nomina;
    private javax.swing.JTable tbl_Percepciones;
    private javax.swing.JTable tbl_Salario;
    private javax.swing.JTextField txf_Estatus;
    // End of variables declaration//GEN-END:variables

}
